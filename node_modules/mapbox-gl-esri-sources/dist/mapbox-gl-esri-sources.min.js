!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t=t||self).mapboxglEsriSources={})}(this,function(t){"use strict";function e(t){return t.replace(/\/$/,"")}function s(t,e={}){return new Promise((s,i)=>{fetch(`${t}?f=json`,e).then(t=>t.json()).then(t=>s(t)).catch(t=>i(t))})}const i='Powered by <a href="https://www.esri.com">Esri</a>';function r(t,e,s){const r=s._controls.find(t=>"_attribHTML"in t);if(!r)return;const a=r.options.customAttribution;"string"==typeof a?r.options.customAttribution=`${a} | ${i}`:void 0===a?r.options.customAttribution=i:Array.isArray(a)&&-1===a.indexOf(i)&&a.push(i),s.style.sourceCaches?s.style.sourceCaches[e]._source.attribution=t:s.style._otherSourceCaches&&(s.style._otherSourceCaches[e]._source.attribution=t),r._updateAttributions()}t.DynamicMapService=class{constructor(t,s,i,r){if(!i.url)throw new Error("A url must be supplied as part of the esriServiceOptions object.");i.url=e(i.url),this._sourceId=t,this._map=s,this._defaultEsriOptions={layers:!1,layerDefs:!1,format:"png24",dpi:96,transparent:!0,getAttributionFromService:!0},this.rasterSrcOptions=r,this.esriServiceOptions=i,this._createSource(),this._serviceMetadata=null,this.options.getAttributionFromService&&this.setAttributionFromService()}get options(){return{...this._defaultEsriOptions,...this.esriServiceOptions}}get _layersStr(){let t=this.options.layers;return!!t&&(Array.isArray(t)||(t=[t]),`show:${t.join(",")}`)}get _layerDefs(){return!1!==this.options.layerDefs&&JSON.stringify(this.options.layerDefs)}get _time(){if(!this.options.to)return!1;let t=this.options.from,e=this.options.to;return t instanceof Date&&(t=t.valueOf()),e instanceof Date&&(e=e.valueOf()),`${t},${e}`}get _source(){const t=this.rasterSrcOptions&&this.rasterSrcOptions.tileSize?this.rasterSrcOptions.tileSize:256,e=new URLSearchParams({bboxSR:3857,imageSR:3857,format:this.options.format,layers:this._layersStr,transparent:this.options.transparent,size:[t,t],f:"image"});return this._time&&e.append("time",this._time),this._layerDefs&&e.append("layerDefs",this._layerDefs),{type:"raster",tiles:[`${this.options.url}/export?bbox={bbox-epsg-3857}&${e.toString()}`],tileSize:t,...this.rasterSrcOptions}}_createSource(){this._map.addSource(this._sourceId,this._source)}_updateSource(){const t=this._map.getSource(this._sourceId);t.tiles[0]=this._source.tiles[0],t._options=this._source,this._map.style.sourceCaches?(this._map.style.sourceCaches[this._sourceId].clearTiles(),this._map.style.sourceCaches[this._sourceId].update(this._map.transform)):this._map.style._otherSourceCaches&&(this._map.style.sourceCaches[this._sourceId].clearTiles(),this._map.style.sourceCaches[this._sourceId].update(this._map.transform))}setLayerDefs(t){this.esriServiceOptions.layerDefs=t,this._updateSource()}setLayers(t){this.esriServiceOptions.layers=t,this._updateSource()}setDate(t,e){this.esriServiceOptions.from=t,this.esriServiceOptions.to=e,this._updateSource()}setAttributionFromService(){this._serviceMetadata?r(this._serviceMetadata.copyrightText,this._sourceId,this._map):this.getMetadata().then(()=>{r(this._serviceMetadata.copyrightText,this._sourceId,this._map)})}getMetadata(){return null!==this._serviceMetadata?Promise.resolve(this._serviceMetadata):new Promise((t,e)=>{s(this.esriServiceOptions.url,this.esriServiceOptions.fetchOptions).then(e=>{this._serviceMetadata=e,t(this._serviceMetadata)}).catch(t=>e(t))})}get _layersStrIdentify(){return this._layersStr.replace("show","visible")}identify(t,e){const s=this._map.getCanvas(),i=this._map.getBounds().toArray();e=e||!1;const r=new URLSearchParams({sr:4326,geometryType:"esriGeometryPoint",geometry:JSON.stringify({x:t.lng,y:t.lat,spatialReference:{wkid:4326}}),tolerance:3,returnGeometry:e,imageDisplay:`${s.width},${s.height},96`,mapExtent:`${i[0][0]},${i[0][1]},${i[1][0]},${i[1][1]}`,layers:this._layersStrIdentify,layerDefs:this._layerDefs,time:this._time,f:"json"});return new Promise((t,e)=>{fetch(`${this.esriServiceOptions.url}/identify?${r.toString()}`,this.esriServiceOptions.fetchOptions).then(t=>t.json()).then(e=>t(e)).catch(t=>e(t))})}},t.ImageService=class{constructor(t,s,i,r){if(!i.url)throw new Error("A url must be supplied as part of the esriServiceOptions object.");i.url=e(i.url),this._sourceId=t,this._map=s,this._defaultEsriOptions={format:"jpgpng",dpi:96,getAttributionFromService:!0},this.rasterSrcOptions=r,this.esriServiceOptions=i,this._createSource(),this._serviceMetadata=null,this.options.getAttributionFromService&&this.setAttributionFromService()}get options(){return{...this._defaultEsriOptions,...this.esriServiceOptions}}get _time(){if(!this.options.to)return!1;let t=this.options.from,e=this.options.to;return t instanceof Date&&(t=t.valueOf()),e instanceof Date&&(e=e.valueOf()),`${t},${e}`}get _source(){const t=this.rasterSrcOptions&&this.rasterSrcOptions.tileSize?this.rasterSrcOptions.tileSize:256,e=new URLSearchParams({bboxSR:3857,imageSR:3857,format:this.options.format,size:[t,t],f:"image"});return this._time&&e.append("time",this._time),this.options.mosaicRule&&e.append("mosaicRule",JSON.stringify(this.options.mosaicRule)),this.options.renderingRule&&e.append("renderingRule",JSON.stringify(this.options.renderingRule)),{type:"raster",tiles:[`${this.options.url}/exportImage?bbox={bbox-epsg-3857}&${e.toString()}`],tileSize:t,...this.rasterSrcOptions}}_createSource(){this._map.addSource(this._sourceId,this._source)}_updateSource(){const t=this._map.getSource(this._sourceId);t.tiles[0]=this._source.tiles[0],t._options=this._source,this._map.style.sourceCaches?(this._map.style.sourceCaches[this._sourceId].clearTiles(),this._map.style.sourceCaches[this._sourceId].update(this._map.transform)):this._map.style._otherSourceCaches&&(this._map.style.sourceCaches[this._sourceId].clearTiles(),this._map.style.sourceCaches[this._sourceId].update(this._map.transform))}setDate(t,e){this.esriServiceOptions.from=t,this.esriServiceOptions.to=e,this._updateSource()}setRenderingRule(t){this.esriServiceOptions.renderingRule=t,this._updateSource()}setMosiacRule(t){this.esriServiceOptions.mosaicRule=t,this._updateSource()}setAttributionFromService(){this._serviceMetadata?r(this._serviceMetadata.copyrightText,this._sourceId,this._map):this.getMetadata().then(()=>{r(this._serviceMetadata.copyrightText,this._sourceId,this._map)})}getMetadata(){return null!==this._serviceMetadata?Promise.resolve(this._serviceMetadata):new Promise((t,e)=>{s(this.esriServiceOptions.url,this.esriServiceOptions.fetchOptions).then(e=>{this._serviceMetadata=e,t(this._serviceMetadata)}).catch(t=>e(t))})}identify(t,e){const s=this._map.getCanvas(),i=this._map.getBounds().toArray();e=e||!1;const r=new URLSearchParams({sr:4326,geometryType:"esriGeometryPoint",geometry:JSON.stringify({x:t.lng,y:t.lat,spatialReference:{wkid:4326}}),tolerance:3,returnGeometry:e,imageDisplay:`${s.width},${s.height},96`,mapExtent:`${i[0][0]},${i[0][1]},${i[1][0]},${i[1][1]}`,layers:this._layersStr,layerDefs:this._layerDefs,time:this._time,f:"json"});return new Promise((t,e)=>{fetch(`${this.esriServiceOptions.url}/identify?${r.toString()}`,this.esriServiceOptions.fetchOptions).then(t=>t.json()).then(e=>t(e)).catch(t=>e(t))})}},t.TiledMapService=class{constructor(t,s,i,r){if(!i.url)throw new Error("A url must be supplied as part of the esriServiceOptions object.");i.url=e(i.url),this._sourceId=t,this._map=s,this.rasterSrcOptions=r,this.esriServiceOptions=i,this._createSource(),this._serviceMetadata=null,i.getAttributionFromService&&this.setAttributionFromService()}get _source(){return{...this.rasterSrcOptions,type:"raster",tiles:[`${this.esriServiceOptions.url}/tile/{z}/{y}/{x}`],tileSize:256}}_createSource(){this._map.addSource(this._sourceId,this._source)}setAttributionFromService(){this._serviceMetadata?r(this._serviceMetadata.copyrightText,this._sourceId,this._map):this.getMetadata().then(()=>{r(this._serviceMetadata.copyrightText,this._sourceId,this._map)})}getMetadata(){return null!==this._serviceMetadata?Promise.resolve():new Promise((t,e)=>{s(this.esriServiceOptions.url,this.esriServiceOptions.fetchOptions).then(e=>{this._serviceMetadata=e,t(e)}).catch(t=>e(t))})}},t.VectorBasemapStyle=class{constructor(t,e){if(!e)throw new Error("An Esri API Key must be supplied to consume vector basemap styles");t||(t="ArcGIS:Streets"),this.styleName=t,this._apikey=e}get styleUrl(){return`https://basemaps-api.arcgis.com/arcgis/rest/services/styles/${this.styleName}?type=style&apiKey=${this._apikey}`}setStyle(t){this.styleName=t}},t.VectorTileService=class{constructor(t,s,i,r){if(!i.url)throw new Error("A url must be supplied as part of the esriServiceOptions object.");i.url=e(i.url),this._sourceId=t,this._map=s,this._defaultEsriOptions={useDefaultStyle:!0},this.vectorSrcOptions=r,this.esriServiceOptions=i,this._serviceMetadata=null,this._defaultStyleData=null,this._createSource()}get options(){return{...this._defaultEsriOptions,...this.esriServiceOptions}}get _tileUrl(){return null===this._serviceMetadata?"/tile/{z}/{y}/{x}.pbf":this._serviceMetadata.tiles[0]}get _source(){return{...this.vectorSrcOptions,type:"vector",tiles:[`${this.options.url}/${this._tileUrl}`]}}_createSource(){this._map.addSource(this._sourceId,this._source)}get defaultStyle(){return null===this._defaultStyleData?{}:{type:this._defaultStyleData.type,source:this._sourceId,"source-layer":this._defaultStyleData["source-layer"],layout:this._defaultStyleData.layout,paint:this._defaultStyleData.paint}}get _styleUrl(){return null===this._serviceMetadata?"resources/styles":`${this.options.url}/${this._serviceMetadata.defaultStyles}`}getStyle(){return null!==this._defaultStyleData?Promise.resolve(this._defaultStyleData):new Promise((t,e)=>{null!==this._serviceMetadata?this.getMetadata().then(()=>{this._retrieveStyle().then(()=>{t(this._defaultStyleData)}).catch(t=>e(t))}).catch(t=>e(t)):this._retrieveStyle().then(()=>{t(this._defaultStyleData)}).catch(t=>e(t))})}_retrieveStyle(){return new Promise((t,e)=>{fetch(`${this.options.url}/${this._styleUrl}`,this.esriServiceOptions.fetchOptions).then(t=>t.json()).then(e=>{this._defaultStyleData=e.layers[0],t()}).catch(t=>e(t))})}getMetadata(){return null!==this._serviceMetadata?Promise.resolve(this._serviceMetadata):new Promise((t,e)=>{s(this.esriServiceOptions.url,this.esriServiceOptions.fetchOptions).then(e=>{this._serviceMetadata=e,t(this._serviceMetadata)}).catch(t=>e(t))})}},Object.defineProperty(t,"__esModule",{value:!0})});
